#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2022 ScyllaDB
#
# SPDX-License-Identifier: Apache-2.0

import os
import subprocess
import yaml
import logging
import sys
from abc import ABCMeta, abstractmethod
from lib.scylla_cloud import get_cloud_instance, is_ec2, is_gce, is_azure


def UnsupportedInstanceClassError(Exception):
    pass


class cloud_io_setup(metaclass=ABCMeta):
    @abstractmethod
    def generate(self):
        pass

    def save(self):
        assert "read_iops" in self.disk_properties
        properties_file = open("/etc/scylla.d/io_properties.yaml", "w")
        yaml.dump({"disks": [self.disk_properties]}, properties_file,  default_flow_style=False)
        ioconf = open("/etc/scylla.d/io.conf", "w")
        ioconf.write("SEASTAR_IO=\"--io-properties-file={}\"\n".format(properties_file.name))
        os.chmod('/etc/scylla.d/io_properties.yaml', 0o644)
        os.chmod('/etc/scylla.d/io.conf', 0o644)


class aws_io_setup(cloud_io_setup):
    def __init__(self, idata):
        self.idata = idata
        self.disk_properties = {}

    def generate(self):
        if not self.idata.is_supported_instance_class():
            logging.error('This is not a recommended EC2 instance setup for auto local disk tuning.')
            raise UnsupportedInstanceClassError()
        self.disk_properties["mountpoint"] = '/var/lib/scylla'
        nr_disks = len(self.idata.get_local_disks())
        instance_type = self.idata.instancetype
        instance_class_all = self.idata.instance_class() + '.ALL'
        with open('/opt/scylladb/scylla-machine-image/aws_io_params.yaml') as f:
            io_params = yaml.safe_load(f)

        t = None
        if instance_type in io_params:
            t = instance_type
        elif instance_class_all in io_params:
            t = instance_class_all
        if t:
            for p in ["read_iops", "read_bandwidth", "write_iops", "write_bandwidth"]:
                self.disk_properties[p] = io_params[t][p] * nr_disks
            self.save()
        else:
            logging.warning("This is a supported instance but with no pre-configured io, scylla_io_setup will be run")
            subprocess.run('scylla_io_setup', shell=True, check=True, capture_output=True, timeout=300)


class gcp_io_setup(cloud_io_setup):
    def __init__(self, idata):
        self.idata = idata
        self.disk_properties = {}

    def generate(self):
        if not self.idata.is_supported_instance_class():
            logging.error('This is not a recommended Google Cloud instance setup for auto local disk tuning.')
            raise UnsupportedInstanceClassError()
        self.disk_properties["mountpoint"] = '/var/lib/scylla'
        
        instance_type = self.idata.instancetype
        nr_disks = self.idata.nvme_disk_count
        
        # Try to load instance-specific parameters from YAML file
        try:
            with open('/opt/scylladb/scylla-machine-image/gcp_io_params.yaml') as f:
                io_params = yaml.safe_load(f)
            
            t = None
            if instance_type in io_params:
                t = instance_type

            if t:
                for p in ["read_iops", "read_bandwidth", "write_iops", "write_bandwidth"]:
                    self.disk_properties[p] = io_params[t][p]
                self.save()
                return
        except FileNotFoundError:
            logging.warning("GCP I/O parameters file not found, falling back to disk-count-based logic")
        except Exception as e:
            logging.warning(f"Error loading GCP I/O parameters: {e}, falling back to disk-count-based logic")
        
        # Fallback to original disk-count-based logic for instances not in YAML
        # below is based on https://cloud.google.com/compute/docs/disks/local-ssd#performance
        # and https://cloud.google.com/compute/docs/disks/local-ssd#nvme
        # note that scylla iotune might measure more, this is GCP recommended
        mbs=1024*1024
        if nr_disks >= 1 and nr_disks < 4:
            self.disk_properties["read_iops"] = 170000 * nr_disks
            self.disk_properties["read_bandwidth"] = 660 * mbs * nr_disks
            self.disk_properties["write_iops"] = 90000 * nr_disks
            self.disk_properties["write_bandwidth"] = 350 * mbs * nr_disks
        elif nr_disks >= 4 and nr_disks <= 8:
            self.disk_properties["read_iops"] = 680000
            self.disk_properties["read_bandwidth"] = 2650 * mbs
            self.disk_properties["write_iops"] = 360000
            self.disk_properties["write_bandwidth"] = 1400 * mbs
        elif nr_disks == 16:
            self.disk_properties["read_iops"] = 1600000
            self.disk_properties["read_bandwidth"] = 4521251328
            #below is google, above is our measured
            #self.disk_properties["read_bandwidth"] = 6240 * mbs
            self.disk_properties["write_iops"] = 800000
            self.disk_properties["write_bandwidth"] = 2759452672
            #below is google, above is our measured
            #self.disk_properties["write_bandwidth"] = 3120 * mbs
        elif nr_disks == 24:
            self.disk_properties["read_iops"] = 2400000
            self.disk_properties["read_bandwidth"] = 5921532416
            #below is google, above is our measured
            #self.disk_properties["read_bandwidth"] = 9360 * mbs
            self.disk_properties["write_iops"] = 1200000
            self.disk_properties["write_bandwidth"] = 4663037952
            #below is google, above is our measured
            #self.disk_properties["write_bandwidth"] = 4680 * mbs

        if "read_iops" in self.disk_properties:
            self.save()
        else:
            logging.warning("This is a supported instance but with no pre-configured io, scylla_io_setup will be run")
            subprocess.run('scylla_io_setup', shell=True, check=True, capture_output=True, timeout=300)


class azure_io_setup(cloud_io_setup):
    def __init__(self, idata):
        self.idata = idata
        self.disk_properties = {}

    def generate(self):
        if not self.idata.is_supported_instance_class():
            logging.error('This is not a recommended Azure Cloud instance setup for auto local disk tuning.')
            raise UnsupportedInstanceClassError()

        self.disk_properties = {}
        self.disk_properties["mountpoint"] = '/var/lib/scylla'
        nr_disks = self.idata.nvme_disk_count
        # below is based on https://docs.microsoft.com/en-us/azure/virtual-machines/lsv2-series
        # note that scylla iotune might measure more, this is Azure recommended
        # since write properties are not defined, they come from our iotune tests
        mbs = 1024*1024
        if nr_disks == 1:
            self.disk_properties["read_iops"] = 400000
            self.disk_properties["read_bandwidth"] = 2000 * mbs
            self.disk_properties["write_iops"] = 271696
            self.disk_properties["write_bandwidth"] = 1314 * mbs
        elif nr_disks == 2:
            self.disk_properties["read_iops"] = 800000
            self.disk_properties["read_bandwidth"] = 4000 * mbs
            self.disk_properties["write_iops"] = 552434
            self.disk_properties["write_bandwidth"] = 2478 * mbs
        elif nr_disks == 4:
            self.disk_properties["read_iops"] = 1500000
            self.disk_properties["read_bandwidth"] = 8000 * mbs
            self.disk_properties["write_iops"] = 1105063
            self.disk_properties["write_bandwidth"] = 4948 * mbs
        elif nr_disks == 6:
            self.disk_properties["read_iops"] = 2200000
            self.disk_properties["read_bandwidth"] = 14000 * mbs
            self.disk_properties["write_iops"] = 1616847
            self.disk_properties["write_bandwidth"] = 7892 * mbs
        elif nr_disks == 8:
            self.disk_properties["read_iops"] = 2900000
            self.disk_properties["read_bandwidth"] = 16000 * mbs
            self.disk_properties["write_iops"] = 2208081
            self.disk_properties["write_bandwidth"] = 9694 * mbs
        elif nr_disks == 10:
            self.disk_properties["read_iops"] = 3800000
            self.disk_properties["read_bandwidth"] = 20000 * mbs
            self.disk_properties["write_iops"] = 2546511
            self.disk_properties["write_bandwidth"] = 11998 * mbs

        if "read_iops" in self.disk_properties:
            self.save()
        else:
            logging.warning("This is a supported instance but with no pre-configured io, scylla_io_setup will be run")
            subprocess.run('scylla_io_setup', shell=True, check=True, capture_output=True, timeout=300)


if __name__ == '__main__':
    if not os.path.ismount('/var/lib/scylla'):
       logging.error('RAID volume not mounted')
       sys.exit(1)
    cloud_instance = get_cloud_instance()
    if is_ec2():
        io = aws_io_setup(cloud_instance)
    elif is_gce():
        io = gcp_io_setup(cloud_instance)
    elif is_azure():
        io = azure_io_setup(cloud_instance)
    try:
        io.generate()
    except UnsupportedInstanceClassError as e:
        sys.exit(1)
