#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 ScyllaDB
#
# SPDX-License-Identifier: Apache-2.0

import os
import sys
import re
import argparse
import pwd
import glob
import stat
from subprocess import run
from pathlib import Path

if __name__ == '__main__':
    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('--target-cloud', choices=['aws', 'gce', 'azure'], help='specify target cloud')
    args = parser.parse_args()

    env_noninteractive = os.environ.copy()
    env_noninteractive['DEBIAN_FRONTEND'] = 'noninteractive'
    run(['apt-get', 'update'])

    # xccdf_org.ssgproject.content_rule_grub2_audit_argument
    kernel_opt = 'audit=1'
    # xccdf_org.ssgproject.content_rule_grub2_audit_backlog_limit_argument
    kernel_opt += ' audit_backlog_limit=8192'
    if args.target_cloud == 'aws' or args.target_cloud == 'gce':
        grub_variable = 'GRUB_CMDLINE_LINUX_DEFAULT'
    elif args.target_cloud == 'azure':
        grub_variable = 'GRUB_CMDLINE_LINUX'
    with open('/etc/default/grub.d/50-cloudimg-settings.cfg') as f:
        grub = f.read()
    grub = re.sub(fr'^{grub_variable}="(.+)"$',
                  fr'{grub_variable}="\1 {kernel_opt}"', grub,
                  flags=re.MULTILINE)
    with open('/etc/default/grub.d/50-cloudimg-settings.cfg', 'w') as f:
        f.write(grub)
    run('update-grub2', shell=True, check=True)


    run('apt-get install -y auditd', shell=True, check=True)

    auditd_rules = '''
## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_insmod
-w /sbin/insmod -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_modprobe
-w /sbin/modprobe -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_rmmod
-w /sbin/rmmod -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_mac_modification
-w /etc/selinux/ -p wa -k MAC-policy

## xccdf_org.ssgproject.content_rule_audit_rules_networkconfig_modification
-a always,exit -F arch=b32 -S sethostname,setdomainname -F key=audit_rules_networkconfig_modification
-a always,exit -F arch=b64 -S sethostname,setdomainname -F key=audit_rules_networkconfig_modification
-w /etc/issue -p wa -k audit_rules_networkconfig_modification
-w /etc/issue.net -p wa -k audit_rules_networkconfig_modification
-w /etc/hosts -p wa -k audit_rules_networkconfig_modification
-w /etc/networks -p wa -k audit_rules_networkconfig_modification
-w /etc/network/ -p wa -k audit_rules_networkconfig_modification

## xccdf_org.ssgproject.content_rule_audit_rules_session_events
-w /var/run/utmp -p wa -k session
-w /var/log/btmp -p wa -k session
-w /var/log/wtmp -p wa -k session

## xccdf_org.ssgproject.content_rule_audit_rules_suid_privilege_function
-a always,exit -F arch=b32 -S execve -C uid!=euid -F euid=0 -k setuid
-a always,exit -F arch=b64 -S execve -C uid!=euid -F euid=0 -k setuid
-a always,exit -F arch=b32 -S execve -C gid!=egid -F egid=0 -k setgid
-a always,exit -F arch=b64 -S execve -C gid!=egid -F egid=0 -k setgid

'''[1:-1]
    with open('/etc/audit/rules.d/70-cis-rules.rules', 'w') as f:
        f.write(auditd_rules)
    os.chmod('/etc/audit/rules.d/70-cis-rules.rules', 0o640)
    run('augenrules --load', shell=True, check=True)

    with open('/etc/audit/auditd.conf') as f:
        auditd = f.read()
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_max_log_file_action
    auditd = re.sub(r'^max_log_file_action = .+$', 'max_log_file_action = KEEP_LOGS', auditd, flags=re.MULTILINE)
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_space_left_action
    auditd = re.sub(r'^space_left_action = .+$', 'space_left_action = EMAIL', auditd, flags=re.MULTILINE)
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_admin_space_left_action
    auditd = re.sub(r'^admin_space_left_action = .+$', 'admin_space_left_action = suspend', auditd, flags=re.MULTILINE)
    with open('/etc/audit/auditd.conf', 'w') as f:
        f.write(auditd)


    sysctl_conf = '''
# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_ra
net.ipv6.conf.all.accept_ra = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_redirects
net.ipv6.conf.all.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_source_route
net.ipv6.conf.all.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_forwarding
net.ipv6.conf.all.forwarding = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_ra
net.ipv6.conf.default.accept_ra = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_redirects
net.ipv6.conf.default.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_source_route
net.ipv6.conf.default.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_accept_redirects
net.ipv4.conf.all.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_accept_source_route
net.ipv4.conf.all.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_log_martians
net.ipv4.conf.all.log_martians = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_rp_filter
net.ipv4.conf.all.rp_filter = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_secure_redirects
net.ipv4.conf.all.secure_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_accept_redirects
net.ipv4.conf.default.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_accept_source_route
net.ipv4.conf.default.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_log_martians
net.ipv4.conf.default.log_martians = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_rp_filter
net.ipv4.conf.default.rp_filter = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_secure_redirects
net.ipv4.conf.default.secure_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_icmp_echo_ignore_broadcasts
net.ipv4.icmp_echo_ignore_broadcasts = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_icmp_ignore_bogus_error_responses
net.ipv4.icmp_ignore_bogus_error_responses = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_tcp_syncookies
net.ipv4.tcp_syncookies = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_send_redirects
net.ipv4.conf.all.send_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_send_redirects
net.ipv4.conf.default.send_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_ip_forward
net.ipv4.ip_forward = 0

# xccdf_org.ssgproject.content_rule_sysctl_fs_suid_dumpable
fs.suid_dumpable = 0

# xccdf_org.ssgproject.content_rule_sysctl_kernel_randomize_va_space
kernel.randomize_va_space = 2
'''[1:-1]
    with open('/etc/sysctl.d/99-cis-rules.conf', 'w') as f:
        f.write(sysctl_conf)
    run('sysctl -p /etc/sysctl.d/99-cis-rules.conf', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_partition_for_tmp
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_nodev
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_noexec
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_nosuid
    tmp_dot_mount = '''
[Unit]
ConditionPathIsSymbolicLink=!/tmp
DefaultDependencies=no
Conflicts=umount.target
Before=local-fs.target umount.target
After=swap.target

[Mount]
What=tmpfs
Where=/tmp
Type=tmpfs
Options=mode=1777,strictatime,nosuid,nodev,noexec,size=50%%,nr_inodes=1m

[Install]
WantedBy=local-fs.target
'''[1:-1]
    with open('/etc/systemd/system/tmp.mount', 'w') as f:
        f.write(tmp_dot_mount)
    run('systemctl daemon-reload', shell=True, check=True)
    run('systemctl enable tmp.mount', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_nodev
    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_noexec
    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_nosuid
    run('fallocate -l 1024MiB /vartmpfile', shell=True, check=True)
    os.chmod('/vartmpfile', 0o600)
    run('mke2fs -t ext4 /vartmpfile', shell=True, check=True)
    var_tmp_dot_mount = '''
[Unit]
Before=local-fs.target
Requires=-.mount
After=-.mount

[Mount]
What=/vartmpfile
Where=/var/tmp
Type=ext4
Options=strictatime,nosuid,nodev,noexec
ReadWriteOnly=True

[Install]
WantedBy=multi-user.target
    '''[1:-1]
    with open('/etc/systemd/system/var-tmp.mount', 'w') as f:
        f.write(var_tmp_dot_mount)
    run('systemctl daemon-reload', shell=True, check=True)
    run('systemctl enable var-tmp.mount', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_sshd_use_strong_ciphers
    # xccdf_org.ssgproject.content_rule_sshd_use_strong_kex
    # xccdf_org.ssgproject.content_rule_sshd_use_strong_macs
    sshd_config = '''
Ciphers aes128-ctr,aes192-ctr,aes256-ctr,chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
KexAlgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256
    '''[1:-1]
    with open('/etc/ssh/sshd_config.d/99-cis-rules.conf', 'w') as f:
        f.write(sshd_config)
    run('systemctl restart ssh.service', shell=True, check=True)

    # xccdf_org.ssgproject.content_rule_accounts_tmout
    var_accounts_tmout = '900'
    with open('/etc/profile.d/tmout.sh', 'w') as file:
        file.write(f"\n# Set TMOUT to {var_accounts_tmout} per security requirements\n")
        file.write(f"TMOUT={var_accounts_tmout}\n")
        file.write("readonly TMOUT\n")
        file.write("export TMOUT\n")
    os.chmod('/etc/profile.d/tmout.sh', 0o755)

    # xccdf_org.ssgproject.content_rule_sudo_custom_logfile
    var_sudo_logfile = '/var/log/sudo.log'
    with open('/etc/sudoers.d/99_logfile', 'w') as f:
        f.write(f"Defaults logfile={var_sudo_logfile}\n")
    os.chmod('/etc/sudoers.d/99_logfile', 0o660)
    run('visudo -cf /etc/sudoers.d/99_logfile', shell=True, check=True)

    # xccdf_org.ssgproject.content_rule_sudo_require_reauthentication
    var_sudo_timestamp_timeout = '15'
    with open('/etc/sudoers.d/99_timestamp_timeout', 'w') as f:
        f.write(f"Defaults timestamp_timeout={var_sudo_timestamp_timeout}\n")
    os.chmod('/etc/sudoers.d/99_timestamp_timeout', 0o660)
    run('visudo -cf /etc/sudoers.d/99_timestamp_timeout', shell=True, check=True)

    # xccdf_org.ssgproject.content_rule_package_aide_installed
    # Install aide package non-interactively
    run(['apt-get', 'install', '-y', 'aide'], env=env_noninteractive)

    # xccdf_org.ssgproject.content_rule_aide_build_database
    run(['/usr/sbin/aideinit', '-y', '-f'])

    # xccdf_org.ssgproject.content_rule_aide_periodic_checking_systemd_timer
    # Nothing to do, periodic job is enabled by default


    # xccdf_org.ssgproject.content_rule_accounts_password_pam_dcredit
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_dictcheck
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_difok
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_enforce_root
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_enforcing
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_lcredit
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_maxrepeat
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_maxsequence
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_minclass
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_minlen
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_ocredit
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_pwquality_enabled
    # xccdf_org.ssgproject.content_rule_accounts_password_pam_ucredit
    run(['apt-get', 'install', '-y', 'libpam-pwquality'], env=env_noninteractive)
    pwquality_path = "/etc/security/pwquality.conf"
    pwquality_content = """dcredit = -1
dictcheck = 1
difok = 2
enforce_for_root
enforcing = 1
lcredit = -1
maxrepeat = 3
maxsequence = 3
minclass = 4
minlen = 14
ocredit = -1
ucredit = -1
"""
    with open(pwquality_path, 'w') as f:
        f.write(pwquality_content)
    os.chmod(pwquality_path, 0o644)


    # xccdf_org.ssgproject.content_rule_ensure_pam_wheel_group_empty
    var_pam_wheel_group_for_su = 'sugroup'

    with open('/etc/group', 'r') as f:
        group_content = f.read()

    group_pattern = f"^{var_pam_wheel_group_for_su}:[^:]*:[^:]*:[^:]*"
    group_exists = any(line.startswith(f"{var_pam_wheel_group_for_su}:") for line in group_content.splitlines())

    if not group_exists:
        run(['groupadd', var_pam_wheel_group_for_su])

    # group must be empty
    run(['gpasswd', '-M', '', var_pam_wheel_group_for_su])


    # xccdf_org.ssgproject.content_rule_use_pam_wheel_group_for_su
    var_pam_wheel_group_for_su = 'sugroup'

    PAM_CONF = '/etc/pam.d/su'

    # Read the PAM configuration file
    with open(PAM_CONF, 'r') as f:
        content = f.read()

    # Look for the specific pam_wheel.so line pattern
    pamstr_match = re.search(r'^auth\s+required\s+pam_wheel\.so\s+(?=[^#]*\buse_uid\b)(?=[^#]*\bgroup=).*$', content, re.MULTILINE)
    pamstr = pamstr_match.group(0) if pamstr_match else ""

    if not pamstr:
        # Remove any remaining uncommented pam_wheel.so line
        content = re.sub(r'^auth\b.*\brequired\b.*\bpam_wheel\.so.*$', '', content, flags=re.MULTILINE)
        # Add the new line after pam_rootok.so
        content = re.sub(r'^(auth\s+sufficient\s+pam_rootok\.so.*$)',
                       fr'\1\nauth             required        pam_wheel.so use_uid group={var_pam_wheel_group_for_su}',
                       content, flags=re.MULTILINE)
    else:
        # Extract group value
        group_match = re.search(r'\bgroup=([_a-z][-0-9_a-z]*)', pamstr)
        group_val = group_match.group(1) if group_match else ""

        if not group_val or group_val != var_pam_wheel_group_for_su:
            content = re.sub(r'(^auth\s+required\s+pam_wheel\.so\s+[^#]*group=)[_a-z][-0-9_a-z]*',
                           fr'\1{var_pam_wheel_group_for_su}', content, flags=re.MULTILINE)

    # Write the modified content back to the file
    with open(PAM_CONF, 'w') as f:
        f.write(content)


    # xccdf_org.ssgproject.content_rule_accounts_maximum_age_login_defs
    var_accounts_maximum_age_login_defs = '365'

    # Check if PASS_MAX_DAYS exists in /etc/login.defs
    with open('/etc/login.defs', 'r') as f:
        content = f.read()

    if re.search(r'^PASS_MAX_DAYS', content, re.MULTILINE):
        # Replace existing PASS_MAX_DAYS line
        new_content = re.sub(r'PASS_MAX_DAYS.*',
                           f'PASS_MAX_DAYS     {var_accounts_maximum_age_login_defs}',
                           content)
        with open('/etc/login.defs', 'w') as f:
            f.write(new_content)
        success = True
    else:
        success = False

    if not success:
        with open('/etc/login.defs', 'a') as f:
            f.write(f"PASS_MAX_DAYS      {var_accounts_maximum_age_login_defs}\n")


    # xccdf_org.ssgproject.content_rule_account_disable_post_pw_expiration
    var_account_disable_post_pw_expiration = '45'
    config_file = "/etc/default/useradd"
    with open(config_file, 'a') as f:
        f.write('\n')
        f.write(f"INACTIVE={var_account_disable_post_pw_expiration}\n")

    # xccdf_org.ssgproject.content_rule_accounts_user_dot_user_ownership
    for user_entry in pwd.getpwall():
        uid = user_entry.pw_uid
        home = user_entry.pw_dir
        if uid >= 1000 and uid != 65534:
            pattern = os.path.join(home, '.[!.]*')
            for filepath in glob.glob(pattern):
                if os.path.isfile(filepath):
                    os.lchown(filepath, uid, -1)


    # xccdf_org.ssgproject.content_rule_accounts_user_dot_group_ownership
    for user_entry in pwd.getpwall():
        gid = user_entry.pw_gid
        home = user_entry.pw_dir
        if gid >= 1000 and gid != 65534:
            pattern = os.path.join(home, '.[!.]*')
            for filepath in glob.glob(pattern):
                if os.path.isfile(filepath):
                    os.lchown(filepath, -1, gid)


    # xccdf_org.ssgproject.content_rule_file_permission_user_init_files
    var_user_initialization_files_regex = re.compile(r'^\.[\w\- ]+$')

    # Get all interactive users with UID >= 1000 (equivalent to readarray commands)
    interactive_users = [entry.pw_name for entry in pwd.getpwall() if entry.pw_uid >= 1000]
    interactive_users_home = [entry.pw_dir for entry in pwd.getpwall() if entry.pw_uid >= 1000]
    interactive_users_shell = [entry.pw_shell for entry in pwd.getpwall() if entry.pw_uid >= 1000]

    USERS_IGNORED_REGEX = re.compile(r'nobody|nfsnobody')

    for i in range(len(interactive_users)):
        if not USERS_IGNORED_REGEX.search(interactive_users[i]) and \
            interactive_users_shell[i] != "/sbin/nologin":

            # Find initialization files in user's home directory (equivalent to find + grep)
            init_files = []
            try:
                with os.scandir(interactive_users_home[i]) as it:
                    for entry in it:
                        if entry.is_file() and var_user_initialization_files_regex.match(entry.name):
                            init_files.append(entry.name)
            except (FileNotFoundError, PermissionError):
                continue

            for file in init_files:
                file_path = Path(interactive_users_home[i]) / file
                # chmod u-s,g-wxs,o= equivalent
                current_mode = file_path.stat().st_mode
                # Remove setuid (u-s), group write/execute/setgid (g-wxs), all others permissions (o=)
                new_mode = current_mode & ~stat.S_ISUID & ~stat.S_IWGRP & ~stat.S_IXGRP & ~stat.S_ISGID & ~stat.S_IRWXO
                file_path.chmod(new_mode)


    # xccdf_org.ssgproject.content_rule_accounts_user_interactive_home_directory_exists
    for entry in pwd.getpwall():
        if entry.pw_uid >= 1000 and entry.pw_uid != 65534:
            run(['mkhomedir_helper', entry.pw_name, '0077'], check=True)
