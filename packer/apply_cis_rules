#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 ScyllaDB
#
# SPDX-License-Identifier: Apache-2.0

import os
import sys
import re
import argparse
from subprocess import run

if __name__ == '__main__':
    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('--target-cloud', choices=['aws', 'gce', 'azure'], help='specify target cloud')
    args = parser.parse_args()

    # xccdf_org.ssgproject.content_rule_grub2_audit_argument
    kernel_opt = 'audit=1'
    # xccdf_org.ssgproject.content_rule_grub2_audit_backlog_limit_argument
    kernel_opt += ' audit_backlog_limit=8192'
    if args.target_cloud == 'aws' or args.target_cloud == 'gce':
        grub_variable = 'GRUB_CMDLINE_LINUX_DEFAULT'
    elif args.target_cloud == 'azure':
        grub_variable = 'GRUB_CMDLINE_LINUX'
    with open('/etc/default/grub.d/50-cloudimg-settings.cfg') as f:
        grub = f.read()
    grub = re.sub(fr'^{grub_variable}="(.+)"$',
                  fr'{grub_variable}="\1 {kernel_opt}"', grub,
                  flags=re.MULTILINE)
    with open('/etc/default/grub.d/50-cloudimg-settings.cfg', 'w') as f:
        f.write(grub)
    run('update-grub2', shell=True, check=True)


    run('apt-get install -y --no-install-recommends auditd', shell=True, check=True)

    auditd_rules = '''
## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_insmod
-w /sbin/insmod -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_modprobe
-w /sbin/modprobe -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_privileged_commands_rmmod
-w /sbin/rmmod -p x -k modules

## xccdf_org.ssgproject.content_rule_audit_rules_mac_modification
-w /etc/selinux/ -p wa -k MAC-policy

## xccdf_org.ssgproject.content_rule_audit_rules_networkconfig_modification
-a always,exit -F arch=b32 -S sethostname,setdomainname -F key=audit_rules_networkconfig_modification
-a always,exit -F arch=b64 -S sethostname,setdomainname -F key=audit_rules_networkconfig_modification
-w /etc/issue -p wa -k audit_rules_networkconfig_modification
-w /etc/issue.net -p wa -k audit_rules_networkconfig_modification
-w /etc/hosts -p wa -k audit_rules_networkconfig_modification
-w /etc/networks -p wa -k audit_rules_networkconfig_modification
-w /etc/network/ -p wa -k audit_rules_networkconfig_modification

## xccdf_org.ssgproject.content_rule_audit_rules_session_events
-w /var/run/utmp -p wa -k session
-w /var/log/btmp -p wa -k session
-w /var/log/wtmp -p wa -k session

## xccdf_org.ssgproject.content_rule_audit_rules_suid_privilege_function
-a always,exit -F arch=b32 -S execve -C uid!=euid -F euid=0 -k setuid
-a always,exit -F arch=b64 -S execve -C uid!=euid -F euid=0 -k setuid
-a always,exit -F arch=b32 -S execve -C gid!=egid -F egid=0 -k setgid
-a always,exit -F arch=b64 -S execve -C gid!=egid -F egid=0 -k setgid

'''[1:-1]
    with open('/etc/audit/rules.d/70-cis-rules.rules', 'w') as f:
        f.write(auditd_rules)
    os.chmod('/etc/audit/rules.d/70-cis-rules.rules', 0o640)
    run('augenrules --load', shell=True, check=True)

    with open('/etc/audit/auditd.conf') as f:
        auditd = f.read()
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_max_log_file_action
    auditd = re.sub(r'^max_log_file_action = .+$', 'max_log_file_action = KEEP_LOGS', auditd, flags=re.MULTILINE)
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_space_left_action
    auditd = re.sub(r'^space_left_action = .+$', 'space_left_action = EMAIL', auditd, flags=re.MULTILINE)
    # xccdf_org.ssgproject.content_rule_auditd_data_retention_admin_space_left_action
    auditd = re.sub(r'^admin_space_left_action = .+$', 'admin_space_left_action = suspend', auditd, flags=re.MULTILINE)
    with open('/etc/audit/auditd.conf', 'w') as f:
        f.write(auditd)


    sysctl_conf = '''
# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_ra
net.ipv6.conf.all.accept_ra = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_redirects
net.ipv6.conf.all.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_accept_source_route
net.ipv6.conf.all.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_all_forwarding
net.ipv6.conf.all.forwarding = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_ra
net.ipv6.conf.default.accept_ra = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_redirects
net.ipv6.conf.default.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv6_conf_default_accept_source_route
net.ipv6.conf.default.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_accept_redirects
net.ipv4.conf.all.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_accept_source_route
net.ipv4.conf.all.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_log_martians
net.ipv4.conf.all.log_martians = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_rp_filter
net.ipv4.conf.all.rp_filter = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_secure_redirects
net.ipv4.conf.all.secure_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_accept_redirects
net.ipv4.conf.default.accept_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_accept_source_route
net.ipv4.conf.default.accept_source_route = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_log_martians
net.ipv4.conf.default.log_martians = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_rp_filter
net.ipv4.conf.default.rp_filter = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_secure_redirects
net.ipv4.conf.default.secure_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_icmp_echo_ignore_broadcasts
net.ipv4.icmp_echo_ignore_broadcasts = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_icmp_ignore_bogus_error_responses
net.ipv4.icmp_ignore_bogus_error_responses = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_tcp_syncookies
net.ipv4.tcp_syncookies = 1

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_all_send_redirects
net.ipv4.conf.all.send_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_conf_default_send_redirects
net.ipv4.conf.default.send_redirects = 0

# xccdf_org.ssgproject.content_rule_sysctl_net_ipv4_ip_forward
net.ipv4.ip_forward = 0

# xccdf_org.ssgproject.content_rule_sysctl_fs_suid_dumpable
fs.suid_dumpable = 0

# xccdf_org.ssgproject.content_rule_sysctl_kernel_randomize_va_space
kernel.randomize_va_space = 2
'''[1:-1]
    with open('/etc/sysctl.d/99-cis-rules.conf', 'w') as f:
        f.write(sysctl_conf)
    run('sysctl -p /etc/sysctl.d/99-cis-rules.conf', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_partition_for_tmp
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_nodev
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_noexec
    # xccdf_org.ssgproject.content_rule_mount_option_tmp_nosuid
    tmp_dot_mount = '''
[Unit]
ConditionPathIsSymbolicLink=!/tmp
DefaultDependencies=no
Conflicts=umount.target
Before=local-fs.target umount.target
After=swap.target

[Mount]
What=tmpfs
Where=/tmp
Type=tmpfs
Options=mode=1777,strictatime,nosuid,nodev,noexec,size=50%%,nr_inodes=1m

[Install]
WantedBy=local-fs.target
'''[1:-1]
    with open('/etc/systemd/system/tmp.mount', 'w') as f:
        f.write(tmp_dot_mount)
    run('systemctl daemon-reload', shell=True, check=True)
    run('systemctl enable tmp.mount', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_nodev
    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_noexec
    # xccdf_org.ssgproject.content_rule_mount_option_var_tmp_nosuid
    run('fallocate -l 1024MiB /vartmpfile', shell=True, check=True)
    os.chmod('/vartmpfile', 0o600)
    run('mke2fs -t ext4 /vartmpfile', shell=True, check=True)
    var_tmp_dot_mount = '''
[Unit]
Before=local-fs.target
Requires=-.mount
After=-.mount

[Mount]
What=/vartmpfile
Where=/var/tmp
Type=ext4
Options=strictatime,nosuid,nodev,noexec
ReadWriteOnly=True

[Install]
WantedBy=multi-user.target
    '''[1:-1]
    with open('/etc/systemd/system/var-tmp.mount', 'w') as f:
        f.write(var_tmp_dot_mount)
    run('systemctl daemon-reload', shell=True, check=True)
    run('systemctl enable var-tmp.mount', shell=True, check=True)


    # xccdf_org.ssgproject.content_rule_sshd_use_strong_ciphers
    # xccdf_org.ssgproject.content_rule_sshd_use_strong_kex
    # xccdf_org.ssgproject.content_rule_sshd_use_strong_macs
    sshd_config = '''
Ciphers aes128-ctr,aes192-ctr,aes256-ctr,chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
KexAlgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256
    '''[1:-1]
    with open('/etc/ssh/sshd_config.d/99-cis-rules.conf', 'w') as f:
        f.write(sshd_config)
    run('systemctl restart ssh.service', shell=True, check=True)

    # xccdf_org.ssgproject.content_rule_accounts_tmout
    var_accounts_tmout = '900'
    with open('/etc/profile.d/tmout.sh', 'w') as file:
        file.write(f"\n# Set TMOUT to {var_accounts_tmout} per security requirements\n")
        file.write(f"TMOUT={var_accounts_tmout}\n")
        file.write("readonly TMOUT\n")
        file.write("export TMOUT\n")
    os.chmod('/etc/profile.d/tmout.sh', 0o755)
